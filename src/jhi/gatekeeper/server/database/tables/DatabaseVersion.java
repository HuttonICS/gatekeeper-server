/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.sql.*;

import javax.annotation.*;

import jhi.gatekeeper.server.database.*;
import jhi.gatekeeper.server.database.tables.records.*;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatabaseVersion extends TableImpl<DatabaseVersionRecord> {

    private static final long serialVersionUID = 122565039;

    /**
     * The reference instance of <code>germinate_gatekeeper.database_version</code>
     */
    public static final DatabaseVersion DATABASE_VERSION = new DatabaseVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatabaseVersionRecord> getRecordType() {
        return DatabaseVersionRecord.class;
    }

    /**
     * The column <code>germinate_gatekeeper.database_version.version</code>. The version number of this database. Incrementing starting from '1'.
     */
    public final TableField<DatabaseVersionRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "The version number of this database. Incrementing starting from '1'.");

    /**
     * The column <code>germinate_gatekeeper.database_version.updated_on</code>. The timestamp of the last update.
     */
    public final TableField<DatabaseVersionRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP, this, "The timestamp of the last update.");

    /**
     * Create a <code>germinate_gatekeeper.database_version</code> table reference
     */
    public DatabaseVersion() {
        this(DSL.name("database_version"), null);
    }

    /**
     * Create an aliased <code>germinate_gatekeeper.database_version</code> table reference
     */
    public DatabaseVersion(String alias) {
        this(DSL.name(alias), DATABASE_VERSION);
    }

    /**
     * Create an aliased <code>germinate_gatekeeper.database_version</code> table reference
     */
    public DatabaseVersion(Name alias) {
        this(alias, DATABASE_VERSION);
    }

    private DatabaseVersion(Name alias, Table<DatabaseVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatabaseVersion(Name alias, Table<DatabaseVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DatabaseVersion(Table<O> child, ForeignKey<O, DatabaseVersionRecord> key) {
        super(child, key, DATABASE_VERSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateGatekeeper.GERMINATE_GATEKEEPER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseVersion as(String alias) {
        return new DatabaseVersion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseVersion as(Name alias) {
        return new DatabaseVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatabaseVersion rename(String name) {
        return new DatabaseVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatabaseVersion rename(Name name) {
        return new DatabaseVersion(name, null);
    }
}
