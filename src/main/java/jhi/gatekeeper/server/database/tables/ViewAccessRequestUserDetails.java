/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import java.sql.Timestamp;

import jhi.gatekeeper.server.database.GatekeeperDb;
import jhi.gatekeeper.server.database.tables.records.ViewAccessRequestUserDetailsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewAccessRequestUserDetails extends TableImpl<ViewAccessRequestUserDetailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>gatekeeper_db.view_access_request_user_details</code>
     */
    public static final ViewAccessRequestUserDetails VIEW_ACCESS_REQUEST_USER_DETAILS = new ViewAccessRequestUserDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewAccessRequestUserDetailsRecord> getRecordType() {
        return ViewAccessRequestUserDetailsRecord.class;
    }

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.id</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.username</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.full_name</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.email_address</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, String> EMAIL_ADDRESS = createField(DSL.name("email_address"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.created_on</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.institution_id</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, Integer> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.name</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.acronym</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, String> ACRONYM = createField(DSL.name("acronym"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.address</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.database_system_name</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, String> DATABASE_SYSTEM_NAME = createField(DSL.name("database_system_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.database_server_name</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, String> DATABASE_SERVER_NAME = createField(DSL.name("database_server_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.has_been_rejected</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, Byte> HAS_BEEN_REJECTED = createField(DSL.name("has_been_rejected"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.needs_approval</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, Byte> NEEDS_APPROVAL = createField(DSL.name("needs_approval"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_access_request_user_details.activation_key</code>.
     */
    public final TableField<ViewAccessRequestUserDetailsRecord, String> ACTIVATION_KEY = createField(DSL.name("activation_key"), SQLDataType.VARCHAR(36), this, "");

    private ViewAccessRequestUserDetails(Name alias, Table<ViewAccessRequestUserDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewAccessRequestUserDetails(Name alias, Table<ViewAccessRequestUserDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_access_request_user_details` as select `germinate_gatekeeper_template_4_25_04_21`.`access_requests`.`id` AS `id`,`germinate_gatekeeper_template_4_25_04_21`.`users`.`username` AS `username`,`germinate_gatekeeper_template_4_25_04_21`.`users`.`full_name` AS `full_name`,`germinate_gatekeeper_template_4_25_04_21`.`users`.`email_address` AS `email_address`,`germinate_gatekeeper_template_4_25_04_21`.`access_requests`.`created_on` AS `created_on`,`germinate_gatekeeper_template_4_25_04_21`.`institutions`.`id` AS `institution_id`,`germinate_gatekeeper_template_4_25_04_21`.`institutions`.`name` AS `name`,`germinate_gatekeeper_template_4_25_04_21`.`institutions`.`acronym` AS `acronym`,`germinate_gatekeeper_template_4_25_04_21`.`institutions`.`address` AS `address`,`germinate_gatekeeper_template_4_25_04_21`.`database_systems`.`system_name` AS `database_system_name`,`germinate_gatekeeper_template_4_25_04_21`.`database_systems`.`server_name` AS `database_server_name`,`germinate_gatekeeper_template_4_25_04_21`.`access_requests`.`has_been_rejected` AS `has_been_rejected`,`germinate_gatekeeper_template_4_25_04_21`.`access_requests`.`needs_approval` AS `needs_approval`,`germinate_gatekeeper_template_4_25_04_21`.`access_requests`.`activation_key` AS `activation_key` from (((`germinate_gatekeeper_template_4_25_04_21`.`access_requests` left join `germinate_gatekeeper_template_4_25_04_21`.`users` on((`germinate_gatekeeper_template_4_25_04_21`.`users`.`id` = `germinate_gatekeeper_template_4_25_04_21`.`access_requests`.`user_id`))) left join `germinate_gatekeeper_template_4_25_04_21`.`institutions` on((`germinate_gatekeeper_template_4_25_04_21`.`institutions`.`id` = `germinate_gatekeeper_template_4_25_04_21`.`users`.`institution_id`))) left join `germinate_gatekeeper_template_4_25_04_21`.`database_systems` on((`germinate_gatekeeper_template_4_25_04_21`.`database_systems`.`id` = `germinate_gatekeeper_template_4_25_04_21`.`access_requests`.`database_system_id`))) where (`germinate_gatekeeper_template_4_25_04_21`.`access_requests`.`has_been_rejected` = 0)"));
    }

    /**
     * Create an aliased
     * <code>gatekeeper_db.view_access_request_user_details</code> table
     * reference
     */
    public ViewAccessRequestUserDetails(String alias) {
        this(DSL.name(alias), VIEW_ACCESS_REQUEST_USER_DETAILS);
    }

    /**
     * Create an aliased
     * <code>gatekeeper_db.view_access_request_user_details</code> table
     * reference
     */
    public ViewAccessRequestUserDetails(Name alias) {
        this(alias, VIEW_ACCESS_REQUEST_USER_DETAILS);
    }

    /**
     * Create a <code>gatekeeper_db.view_access_request_user_details</code>
     * table reference
     */
    public ViewAccessRequestUserDetails() {
        this(DSL.name("view_access_request_user_details"), null);
    }

    public <O extends Record> ViewAccessRequestUserDetails(Table<O> child, ForeignKey<O, ViewAccessRequestUserDetailsRecord> key) {
        super(child, key, VIEW_ACCESS_REQUEST_USER_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GatekeeperDb.GATEKEEPER_DB;
    }

    @Override
    public ViewAccessRequestUserDetails as(String alias) {
        return new ViewAccessRequestUserDetails(DSL.name(alias), this);
    }

    @Override
    public ViewAccessRequestUserDetails as(Name alias) {
        return new ViewAccessRequestUserDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewAccessRequestUserDetails rename(String name) {
        return new ViewAccessRequestUserDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewAccessRequestUserDetails rename(Name name) {
        return new ViewAccessRequestUserDetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, String, Timestamp, Integer, String, String, String, String, String, Byte, Byte, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
