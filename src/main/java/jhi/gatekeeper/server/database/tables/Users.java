/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import jhi.gatekeeper.server.database.GatekeeperDb;
import jhi.gatekeeper.server.database.Indexes;
import jhi.gatekeeper.server.database.Keys;
import jhi.gatekeeper.server.database.tables.records.UsersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gatekeeper_db.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>gatekeeper_db.users.id</code>.
     */
    public final TableField<UsersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gatekeeper_db.users.username</code>.
     */
    public final TableField<UsersRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.users.password</code>.
     */
    public final TableField<UsersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.users.full_name</code>.
     */
    public final TableField<UsersRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.users.email_address</code>.
     */
    public final TableField<UsersRecord, String> EMAIL_ADDRESS = createField(DSL.name("email_address"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.users.created_on</code>.
     */
    public final TableField<UsersRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column <code>gatekeeper_db.users.last_login</code>.
     */
    public final TableField<UsersRecord, Timestamp> LAST_LOGIN = createField(DSL.name("last_login"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column <code>gatekeeper_db.users.institution_id</code>.
     */
    public final TableField<UsersRecord, Integer> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>gatekeeper_db.users.has_access_to_gatekeeper</code>.
     */
    public final TableField<UsersRecord, Byte> HAS_ACCESS_TO_GATEKEEPER = createField(DSL.name("has_access_to_gatekeeper"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gatekeeper_db.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>gatekeeper_db.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>gatekeeper_db.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GatekeeperDb.GATEKEEPER_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USERS_FK_USERS_INSTITUTIONS1_IDX);
    }

    @Override
    public Identity<UsersRecord, Integer> getIdentity() {
        return (Identity<UsersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.KEY_USERS_PRIMARY;
    }

    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USERS_IBFK_1);
    }

    private transient Institutions _institutions;

    /**
     * Get the implicit join path to the
     * <code>germinate_gatekeeper_template_4_21_08_31.institutions</code> table.
     */
    public Institutions institutions() {
        if (_institutions == null)
            _institutions = new Institutions(this, Keys.USERS_IBFK_1);

        return _institutions;
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, Timestamp, Timestamp, Integer, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
