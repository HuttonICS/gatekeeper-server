/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import jhi.gatekeeper.server.database.GatekeeperDb;
import jhi.gatekeeper.server.database.Indexes;
import jhi.gatekeeper.server.database.Keys;
import jhi.gatekeeper.server.database.tables.records.PasswordResetLogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Log table of password reset requests.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PasswordResetLog extends TableImpl<PasswordResetLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gatekeeper_db.password_reset_log</code>
     */
    public static final PasswordResetLog PASSWORD_RESET_LOG = new PasswordResetLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PasswordResetLogRecord> getRecordType() {
        return PasswordResetLogRecord.class;
    }

    /**
     * The column <code>gatekeeper_db.password_reset_log.user_id</code>.
     */
    public final TableField<PasswordResetLogRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.password_reset_log.timestamp</code>.
     */
    public final TableField<PasswordResetLogRecord, Timestamp> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>gatekeeper_db.password_reset_log.ip_address</code>.
     */
    public final TableField<PasswordResetLogRecord, String> IP_ADDRESS = createField(DSL.name("ip_address"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    private PasswordResetLog(Name alias, Table<PasswordResetLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private PasswordResetLog(Name alias, Table<PasswordResetLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Log table of password reset requests."), TableOptions.table());
    }

    /**
     * Create an aliased <code>gatekeeper_db.password_reset_log</code> table
     * reference
     */
    public PasswordResetLog(String alias) {
        this(DSL.name(alias), PASSWORD_RESET_LOG);
    }

    /**
     * Create an aliased <code>gatekeeper_db.password_reset_log</code> table
     * reference
     */
    public PasswordResetLog(Name alias) {
        this(alias, PASSWORD_RESET_LOG);
    }

    /**
     * Create a <code>gatekeeper_db.password_reset_log</code> table reference
     */
    public PasswordResetLog() {
        this(DSL.name("password_reset_log"), null);
    }

    public <O extends Record> PasswordResetLog(Table<O> child, ForeignKey<O, PasswordResetLogRecord> key) {
        super(child, key, PASSWORD_RESET_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GatekeeperDb.GATEKEEPER_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PASSWORD_RESET_LOG_USER_ID_USERS_USER_ID_IDX);
    }

    @Override
    public UniqueKey<PasswordResetLogRecord> getPrimaryKey() {
        return Keys.KEY_PASSWORD_RESET_LOG_PRIMARY;
    }

    @Override
    public List<ForeignKey<PasswordResetLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PASSWORD_RESET_LOG_IBFK_1);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the
     * <code>germinate_gatekeeper_template_4_25_04_21.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.PASSWORD_RESET_LOG_IBFK_1);

        return _users;
    }

    @Override
    public PasswordResetLog as(String alias) {
        return new PasswordResetLog(DSL.name(alias), this);
    }

    @Override
    public PasswordResetLog as(Name alias) {
        return new PasswordResetLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PasswordResetLog rename(String name) {
        return new PasswordResetLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PasswordResetLog rename(Name name) {
        return new PasswordResetLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Timestamp, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
