/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jhi.gatekeeper.server.database.GatekeeperDb;
import jhi.gatekeeper.server.database.Indexes;
import jhi.gatekeeper.server.database.Keys;
import jhi.gatekeeper.server.database.tables.records.UserTypesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTypes extends TableImpl<UserTypesRecord> {

    private static final long serialVersionUID = -286996307;

    /**
     * The reference instance of <code>gatekeeper_db.user_types</code>
     */
    public static final UserTypes USER_TYPES = new UserTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserTypesRecord> getRecordType() {
        return UserTypesRecord.class;
    }

    /**
     * The column <code>gatekeeper_db.user_types.id</code>.
     */
    public final TableField<UserTypesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gatekeeper_db.user_types.description</code>.
     */
    public final TableField<UserTypesRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * Create a <code>gatekeeper_db.user_types</code> table reference
     */
    public UserTypes() {
        this(DSL.name("user_types"), null);
    }

    /**
     * Create an aliased <code>gatekeeper_db.user_types</code> table reference
     */
    public UserTypes(String alias) {
        this(DSL.name(alias), USER_TYPES);
    }

    /**
     * Create an aliased <code>gatekeeper_db.user_types</code> table reference
     */
    public UserTypes(Name alias) {
        this(alias, USER_TYPES);
    }

    private UserTypes(Name alias, Table<UserTypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserTypes(Name alias, Table<UserTypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserTypes(Table<O> child, ForeignKey<O, UserTypesRecord> key) {
        super(child, key, USER_TYPES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GatekeeperDb.GATEKEEPER_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_TYPES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserTypesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_TYPES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserTypesRecord> getPrimaryKey() {
        return Keys.KEY_USER_TYPES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserTypesRecord>> getKeys() {
        return Arrays.<UniqueKey<UserTypesRecord>>asList(Keys.KEY_USER_TYPES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserTypes as(String alias) {
        return new UserTypes(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserTypes as(Name alias) {
        return new UserTypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTypes rename(String name) {
        return new UserTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTypes rename(Name name) {
        return new UserTypes(name, null);
    }
}
