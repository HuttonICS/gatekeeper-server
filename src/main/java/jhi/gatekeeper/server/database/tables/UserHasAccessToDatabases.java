/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import java.util.Arrays;
import java.util.List;

import jhi.gatekeeper.server.database.GatekeeperDb;
import jhi.gatekeeper.server.database.Indexes;
import jhi.gatekeeper.server.database.Keys;
import jhi.gatekeeper.server.database.tables.records.UserHasAccessToDatabasesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserHasAccessToDatabases extends TableImpl<UserHasAccessToDatabasesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>gatekeeper_db.user_has_access_to_databases</code>
     */
    public static final UserHasAccessToDatabases USER_HAS_ACCESS_TO_DATABASES = new UserHasAccessToDatabases();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserHasAccessToDatabasesRecord> getRecordType() {
        return UserHasAccessToDatabasesRecord.class;
    }

    /**
     * The column
     * <code>gatekeeper_db.user_has_access_to_databases.user_id</code>.
     */
    public final TableField<UserHasAccessToDatabasesRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>gatekeeper_db.user_has_access_to_databases.database_id</code>.
     */
    public final TableField<UserHasAccessToDatabasesRecord, Integer> DATABASE_ID = createField(DSL.name("database_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>gatekeeper_db.user_has_access_to_databases.user_type_id</code>.
     */
    public final TableField<UserHasAccessToDatabasesRecord, Integer> USER_TYPE_ID = createField(DSL.name("user_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private UserHasAccessToDatabases(Name alias, Table<UserHasAccessToDatabasesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserHasAccessToDatabases(Name alias, Table<UserHasAccessToDatabasesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gatekeeper_db.user_has_access_to_databases</code>
     * table reference
     */
    public UserHasAccessToDatabases(String alias) {
        this(DSL.name(alias), USER_HAS_ACCESS_TO_DATABASES);
    }

    /**
     * Create an aliased <code>gatekeeper_db.user_has_access_to_databases</code>
     * table reference
     */
    public UserHasAccessToDatabases(Name alias) {
        this(alias, USER_HAS_ACCESS_TO_DATABASES);
    }

    /**
     * Create a <code>gatekeeper_db.user_has_access_to_databases</code> table
     * reference
     */
    public UserHasAccessToDatabases() {
        this(DSL.name("user_has_access_to_databases"), null);
    }

    public <O extends Record> UserHasAccessToDatabases(Table<O> child, ForeignKey<O, UserHasAccessToDatabasesRecord> key) {
        super(child, key, USER_HAS_ACCESS_TO_DATABASES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GatekeeperDb.GATEKEEPER_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USER_HAS_ACCESS_TO_DATABASES_FK_USERS_HAS_ACCESS_TO_DATABASES_USER_TYPES1_IDX, Indexes.USER_HAS_ACCESS_TO_DATABASES_FK_USERS_HAS_DATABASES_DATABASES1_IDX, Indexes.USER_HAS_ACCESS_TO_DATABASES_FK_USERS_HAS_DATABASES_USERS1_IDX);
    }

    @Override
    public UniqueKey<UserHasAccessToDatabasesRecord> getPrimaryKey() {
        return Keys.KEY_USER_HAS_ACCESS_TO_DATABASES_PRIMARY;
    }

    @Override
    public List<ForeignKey<UserHasAccessToDatabasesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_3, Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_2, Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_1);
    }

    private transient Users _users;
    private transient DatabaseSystems _databaseSystems;
    private transient UserTypes _userTypes;

    /**
     * Get the implicit join path to the
     * <code>germinate_gatekeeper_template_4_21_08_31.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_3);

        return _users;
    }

    /**
     * Get the implicit join path to the
     * <code>germinate_gatekeeper_template_4_21_08_31.database_systems</code>
     * table.
     */
    public DatabaseSystems databaseSystems() {
        if (_databaseSystems == null)
            _databaseSystems = new DatabaseSystems(this, Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_2);

        return _databaseSystems;
    }

    /**
     * Get the implicit join path to the
     * <code>germinate_gatekeeper_template_4_21_08_31.user_types</code> table.
     */
    public UserTypes userTypes() {
        if (_userTypes == null)
            _userTypes = new UserTypes(this, Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_1);

        return _userTypes;
    }

    @Override
    public UserHasAccessToDatabases as(String alias) {
        return new UserHasAccessToDatabases(DSL.name(alias), this);
    }

    @Override
    public UserHasAccessToDatabases as(Name alias) {
        return new UserHasAccessToDatabases(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserHasAccessToDatabases rename(String name) {
        return new UserHasAccessToDatabases(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserHasAccessToDatabases rename(Name name) {
        return new UserHasAccessToDatabases(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
