/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.util.*;

import javax.annotation.Generated;

import jhi.gatekeeper.server.database.*;
import jhi.gatekeeper.server.database.tables.records.UserHasAccessToDatabasesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UserHasAccessToDatabases extends TableImpl<UserHasAccessToDatabasesRecord>
{

    /**
     * The reference instance of <code>germinate_gatekeeper.user_has_access_to_databases</code>
     */
    public static final  UserHasAccessToDatabases                            USER_HAS_ACCESS_TO_DATABASES = new UserHasAccessToDatabases();
    private static final long                                                serialVersionUID             = 2146042450;
    /**
     * The column <code>germinate_gatekeeper.user_has_access_to_databases.user_id</code>.
     */
    public final         TableField<UserHasAccessToDatabasesRecord, Integer> USER_ID                      = createField("user_id", SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>germinate_gatekeeper.user_has_access_to_databases.database_id</code>.
     */
    public final         TableField<UserHasAccessToDatabasesRecord, Integer> DATABASE_ID                  = createField("database_id", SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>germinate_gatekeeper.user_has_access_to_databases.user_type_id</code>.
     */
    public final         TableField<UserHasAccessToDatabasesRecord, Integer> USER_TYPE_ID                 = createField("user_type_id", SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>germinate_gatekeeper.user_has_access_to_databases</code> table reference
     */
    public UserHasAccessToDatabases()
    {
        this(DSL.name("user_has_access_to_databases"), null);
    }

    /**
     * Create an aliased <code>germinate_gatekeeper.user_has_access_to_databases</code> table reference
     */
    public UserHasAccessToDatabases(String alias)
    {
        this(DSL.name(alias), USER_HAS_ACCESS_TO_DATABASES);
    }

    /**
     * Create an aliased <code>germinate_gatekeeper.user_has_access_to_databases</code> table reference
     */
    public UserHasAccessToDatabases(Name alias)
    {
        this(alias, USER_HAS_ACCESS_TO_DATABASES);
    }

    private UserHasAccessToDatabases(Name alias, Table<UserHasAccessToDatabasesRecord> aliased)
    {
        this(alias, aliased, null);
    }

    private UserHasAccessToDatabases(Name alias, Table<UserHasAccessToDatabasesRecord> aliased, Field<?>[] parameters)
    {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserHasAccessToDatabases(Table<O> child, ForeignKey<O, UserHasAccessToDatabasesRecord> key)
    {
        super(child, key, USER_HAS_ACCESS_TO_DATABASES);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserHasAccessToDatabasesRecord> getRecordType()
    {
        return UserHasAccessToDatabasesRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema()
    {
        return GerminateGatekeeper.GERMINATE_GATEKEEPER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes()
    {
        return Arrays.<Index>asList(Indexes.USER_HAS_ACCESS_TO_DATABASES_FK_USERS_HAS_ACCESS_TO_DATABASES_USER_TYPES1_IDX, Indexes.USER_HAS_ACCESS_TO_DATABASES_FK_USERS_HAS_DATABASES_DATABASES1_IDX, Indexes.USER_HAS_ACCESS_TO_DATABASES_FK_USERS_HAS_DATABASES_USERS1_IDX, Indexes.USER_HAS_ACCESS_TO_DATABASES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserHasAccessToDatabasesRecord> getPrimaryKey()
    {
        return Keys.KEY_USER_HAS_ACCESS_TO_DATABASES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserHasAccessToDatabasesRecord>> getKeys()
    {
        return Arrays.<UniqueKey<UserHasAccessToDatabasesRecord>>asList(Keys.KEY_USER_HAS_ACCESS_TO_DATABASES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserHasAccessToDatabasesRecord, ?>> getReferences()
    {
        return Arrays.<ForeignKey<UserHasAccessToDatabasesRecord, ?>>asList(Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_3, Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_2, Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_1);
    }

    public Users users()
    {
        return new Users(this, Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_3);
    }

    public DatabaseSystems databaseSystems()
    {
        return new DatabaseSystems(this, Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_2);
    }

    public UserTypes userTypes()
    {
        return new UserTypes(this, Keys.USER_HAS_ACCESS_TO_DATABASES_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserHasAccessToDatabases as(String alias)
    {
        return new UserHasAccessToDatabases(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserHasAccessToDatabases as(Name alias)
    {
        return new UserHasAccessToDatabases(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserHasAccessToDatabases rename(String name)
    {
        return new UserHasAccessToDatabases(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserHasAccessToDatabases rename(Name name)
    {
        return new UserHasAccessToDatabases(name, null);
    }
}
