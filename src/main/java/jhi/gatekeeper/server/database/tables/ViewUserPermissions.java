/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import javax.annotation.Generated;

import jhi.gatekeeper.server.database.GatekeeperDb;
import jhi.gatekeeper.server.database.tables.records.ViewUserPermissionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewUserPermissions extends TableImpl<ViewUserPermissionsRecord> {

    private static final long serialVersionUID = 2031423463;

    /**
     * The reference instance of <code>gatekeeper_db.view_user_permissions</code>
     */
    public static final ViewUserPermissions VIEW_USER_PERMISSIONS = new ViewUserPermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewUserPermissionsRecord> getRecordType() {
        return ViewUserPermissionsRecord.class;
    }

    /**
     * The column <code>gatekeeper_db.view_user_permissions.user_id</code>.
     */
    public final TableField<ViewUserPermissionsRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.username</code>.
     */
    public final TableField<ViewUserPermissionsRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.database_id</code>.
     */
    public final TableField<ViewUserPermissionsRecord, Integer> DATABASE_ID = createField("database_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.system_name</code>.
     */
    public final TableField<ViewUserPermissionsRecord, String> SYSTEM_NAME = createField("system_name", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.server_name</code>.
     */
    public final TableField<ViewUserPermissionsRecord, String> SERVER_NAME = createField("server_name", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.user_type_id</code>.
     */
    public final TableField<ViewUserPermissionsRecord, Integer> USER_TYPE_ID = createField("user_type_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.user_type</code>.
     */
    public final TableField<ViewUserPermissionsRecord, String> USER_TYPE = createField("user_type", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>gatekeeper_db.view_user_permissions</code> table reference
     */
    public ViewUserPermissions() {
        this(DSL.name("view_user_permissions"), null);
    }

    /**
     * Create an aliased <code>gatekeeper_db.view_user_permissions</code> table reference
     */
    public ViewUserPermissions(String alias) {
        this(DSL.name(alias), VIEW_USER_PERMISSIONS);
    }

    /**
     * Create an aliased <code>gatekeeper_db.view_user_permissions</code> table reference
     */
    public ViewUserPermissions(Name alias) {
        this(alias, VIEW_USER_PERMISSIONS);
    }

    private ViewUserPermissions(Name alias, Table<ViewUserPermissionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewUserPermissions(Name alias, Table<ViewUserPermissionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    public <O extends Record> ViewUserPermissions(Table<O> child, ForeignKey<O, ViewUserPermissionsRecord> key) {
        super(child, key, VIEW_USER_PERMISSIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GatekeeperDb.GATEKEEPER_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewUserPermissions as(String alias) {
        return new ViewUserPermissions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewUserPermissions as(Name alias) {
        return new ViewUserPermissions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewUserPermissions rename(String name) {
        return new ViewUserPermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewUserPermissions rename(Name name) {
        return new ViewUserPermissions(name, null);
    }
}
