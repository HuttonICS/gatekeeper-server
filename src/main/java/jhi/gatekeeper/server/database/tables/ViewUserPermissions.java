/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import jhi.gatekeeper.server.database.GatekeeperDb;
import jhi.gatekeeper.server.database.tables.records.ViewUserPermissionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewUserPermissions extends TableImpl<ViewUserPermissionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>gatekeeper_db.view_user_permissions</code>
     */
    public static final ViewUserPermissions VIEW_USER_PERMISSIONS = new ViewUserPermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewUserPermissionsRecord> getRecordType() {
        return ViewUserPermissionsRecord.class;
    }

    /**
     * The column <code>gatekeeper_db.view_user_permissions.user_id</code>.
     */
    public final TableField<ViewUserPermissionsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.username</code>.
     */
    public final TableField<ViewUserPermissionsRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.database_id</code>.
     */
    public final TableField<ViewUserPermissionsRecord, Integer> DATABASE_ID = createField(DSL.name("database_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.system_name</code>.
     */
    public final TableField<ViewUserPermissionsRecord, String> SYSTEM_NAME = createField(DSL.name("system_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.server_name</code>.
     */
    public final TableField<ViewUserPermissionsRecord, String> SERVER_NAME = createField(DSL.name("server_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.user_type_id</code>.
     */
    public final TableField<ViewUserPermissionsRecord, Integer> USER_TYPE_ID = createField(DSL.name("user_type_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_permissions.user_type</code>.
     */
    public final TableField<ViewUserPermissionsRecord, String> USER_TYPE = createField(DSL.name("user_type"), SQLDataType.VARCHAR(64), this, "");

    private ViewUserPermissions(Name alias, Table<ViewUserPermissionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewUserPermissions(Name alias, Table<ViewUserPermissionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_user_permissions` as select `germinate_gatekeeper_template_4_21_08_31`.`users`.`id` AS `user_id`,`germinate_gatekeeper_template_4_21_08_31`.`users`.`username` AS `username`,`germinate_gatekeeper_template_4_21_08_31`.`database_systems`.`id` AS `database_id`,`germinate_gatekeeper_template_4_21_08_31`.`database_systems`.`system_name` AS `system_name`,`germinate_gatekeeper_template_4_21_08_31`.`database_systems`.`server_name` AS `server_name`,`germinate_gatekeeper_template_4_21_08_31`.`user_types`.`id` AS `user_type_id`,`germinate_gatekeeper_template_4_21_08_31`.`user_types`.`description` AS `user_type` from (((`germinate_gatekeeper_template_4_21_08_31`.`user_has_access_to_databases` left join `germinate_gatekeeper_template_4_21_08_31`.`users` on((`germinate_gatekeeper_template_4_21_08_31`.`users`.`id` = `germinate_gatekeeper_template_4_21_08_31`.`user_has_access_to_databases`.`user_id`))) left join `germinate_gatekeeper_template_4_21_08_31`.`user_types` on((`germinate_gatekeeper_template_4_21_08_31`.`user_types`.`id` = `germinate_gatekeeper_template_4_21_08_31`.`user_has_access_to_databases`.`user_type_id`))) left join `germinate_gatekeeper_template_4_21_08_31`.`database_systems` on((`germinate_gatekeeper_template_4_21_08_31`.`database_systems`.`id` = `germinate_gatekeeper_template_4_21_08_31`.`user_has_access_to_databases`.`database_id`)))"));
    }

    /**
     * Create an aliased <code>gatekeeper_db.view_user_permissions</code> table
     * reference
     */
    public ViewUserPermissions(String alias) {
        this(DSL.name(alias), VIEW_USER_PERMISSIONS);
    }

    /**
     * Create an aliased <code>gatekeeper_db.view_user_permissions</code> table
     * reference
     */
    public ViewUserPermissions(Name alias) {
        this(alias, VIEW_USER_PERMISSIONS);
    }

    /**
     * Create a <code>gatekeeper_db.view_user_permissions</code> table reference
     */
    public ViewUserPermissions() {
        this(DSL.name("view_user_permissions"), null);
    }

    public <O extends Record> ViewUserPermissions(Table<O> child, ForeignKey<O, ViewUserPermissionsRecord> key) {
        super(child, key, VIEW_USER_PERMISSIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GatekeeperDb.GATEKEEPER_DB;
    }

    @Override
    public ViewUserPermissions as(String alias) {
        return new ViewUserPermissions(DSL.name(alias), this);
    }

    @Override
    public ViewUserPermissions as(Name alias) {
        return new ViewUserPermissions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewUserPermissions rename(String name) {
        return new ViewUserPermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewUserPermissions rename(Name name) {
        return new ViewUserPermissions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, Integer, String, String, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
