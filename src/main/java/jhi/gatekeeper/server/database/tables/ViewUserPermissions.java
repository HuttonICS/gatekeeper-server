/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import javax.annotation.Generated;

import jhi.gatekeeper.server.database.GerminateGatekeeper;
import jhi.gatekeeper.server.database.tables.records.ViewUserPermissionsRecord;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ViewUserPermissions extends TableImpl<ViewUserPermissionsRecord>
{

    /**
     * The reference instance of <code>germinate_gatekeeper.view_user_permissions</code>
     */
    public static final  ViewUserPermissions                            VIEW_USER_PERMISSIONS = new ViewUserPermissions();
    private static final long                                           serialVersionUID      = 995926209;
    /**
     * The column <code>germinate_gatekeeper.view_user_permissions.user_id</code>.
     */
    public final         TableField<ViewUserPermissionsRecord, Integer> USER_ID               = createField("user_id", SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");
    /**
     * The column <code>germinate_gatekeeper.view_user_permissions.username</code>.
     */
    public final         TableField<ViewUserPermissionsRecord, String>  USERNAME              = createField("username", SQLDataType.VARCHAR(45).nullable(false), this, "");
    /**
     * The column <code>germinate_gatekeeper.view_user_permissions.database_id</code>.
     */
    public final         TableField<ViewUserPermissionsRecord, Integer> DATABASE_ID           = createField("database_id", SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");
    /**
     * The column <code>germinate_gatekeeper.view_user_permissions.system_name</code>.
     */
    public final         TableField<ViewUserPermissionsRecord, String>  SYSTEM_NAME           = createField("system_name", SQLDataType.VARCHAR(64), this, "");
    /**
     * The column <code>germinate_gatekeeper.view_user_permissions.server_name</code>.
     */
    public final         TableField<ViewUserPermissionsRecord, String>  SERVER_NAME           = createField("server_name", SQLDataType.VARCHAR(64), this, "");
    /**
     * The column <code>germinate_gatekeeper.view_user_permissions.user_type_id</code>.
     */
    public final         TableField<ViewUserPermissionsRecord, Integer> USER_TYPE_ID          = createField("user_type_id", SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");
    /**
     * The column <code>germinate_gatekeeper.view_user_permissions.user_type</code>.
     */
    public final         TableField<ViewUserPermissionsRecord, String>  USER_TYPE             = createField("user_type", SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>germinate_gatekeeper.view_user_permissions</code> table reference
     */
    public ViewUserPermissions()
    {
        this(DSL.name("view_user_permissions"), null);
    }

    /**
     * Create an aliased <code>germinate_gatekeeper.view_user_permissions</code> table reference
     */
    public ViewUserPermissions(String alias)
    {
        this(DSL.name(alias), VIEW_USER_PERMISSIONS);
    }

    /**
     * Create an aliased <code>germinate_gatekeeper.view_user_permissions</code> table reference
     */
    public ViewUserPermissions(Name alias)
    {
        this(alias, VIEW_USER_PERMISSIONS);
    }

    private ViewUserPermissions(Name alias, Table<ViewUserPermissionsRecord> aliased)
    {
        this(alias, aliased, null);
    }

    private ViewUserPermissions(Name alias, Table<ViewUserPermissionsRecord> aliased, Field<?>[] parameters)
    {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    public <O extends Record> ViewUserPermissions(Table<O> child, ForeignKey<O, ViewUserPermissionsRecord> key)
    {
        super(child, key, VIEW_USER_PERMISSIONS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewUserPermissionsRecord> getRecordType()
    {
        return ViewUserPermissionsRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema()
    {
        return GerminateGatekeeper.GERMINATE_GATEKEEPER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewUserPermissions as(String alias)
    {
        return new ViewUserPermissions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewUserPermissions as(Name alias)
    {
        return new ViewUserPermissions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewUserPermissions rename(String name)
    {
        return new ViewUserPermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewUserPermissions rename(Name name)
    {
        return new ViewUserPermissions(name, null);
    }
}
