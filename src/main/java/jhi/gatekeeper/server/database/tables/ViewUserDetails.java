/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import java.sql.Timestamp;

import jhi.gatekeeper.server.database.GatekeeperDb;
import jhi.gatekeeper.server.database.tables.records.ViewUserDetailsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewUserDetails extends TableImpl<ViewUserDetailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gatekeeper_db.view_user_details</code>
     */
    public static final ViewUserDetails VIEW_USER_DETAILS = new ViewUserDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewUserDetailsRecord> getRecordType() {
        return ViewUserDetailsRecord.class;
    }

    /**
     * The column <code>gatekeeper_db.view_user_details.id</code>.
     */
    public final TableField<ViewUserDetailsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_details.username</code>.
     */
    public final TableField<ViewUserDetailsRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_details.full_name</code>.
     */
    public final TableField<ViewUserDetailsRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_details.email_address</code>.
     */
    public final TableField<ViewUserDetailsRecord, String> EMAIL_ADDRESS = createField(DSL.name("email_address"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_details.last_login</code>.
     */
    public final TableField<ViewUserDetailsRecord, Timestamp> LAST_LOGIN = createField(DSL.name("last_login"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_details.created_on</code>.
     */
    public final TableField<ViewUserDetailsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column
     * <code>gatekeeper_db.view_user_details.gatekeeper_access</code>.
     */
    public final TableField<ViewUserDetailsRecord, Byte> GATEKEEPER_ACCESS = createField(DSL.name("gatekeeper_access"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_details.name</code>.
     */
    public final TableField<ViewUserDetailsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_details.acronym</code>.
     */
    public final TableField<ViewUserDetailsRecord, String> ACRONYM = createField(DSL.name("acronym"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>gatekeeper_db.view_user_details.address</code>.
     */
    public final TableField<ViewUserDetailsRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    private ViewUserDetails(Name alias, Table<ViewUserDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewUserDetails(Name alias, Table<ViewUserDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_user_details` as select `germinate_gatekeeper_template_4_25_04_21`.`users`.`id` AS `id`,`germinate_gatekeeper_template_4_25_04_21`.`users`.`username` AS `username`,`germinate_gatekeeper_template_4_25_04_21`.`users`.`full_name` AS `full_name`,`germinate_gatekeeper_template_4_25_04_21`.`users`.`email_address` AS `email_address`,`germinate_gatekeeper_template_4_25_04_21`.`users`.`last_login` AS `last_login`,`germinate_gatekeeper_template_4_25_04_21`.`users`.`created_on` AS `created_on`,`germinate_gatekeeper_template_4_25_04_21`.`users`.`has_access_to_gatekeeper` AS `gatekeeper_access`,`germinate_gatekeeper_template_4_25_04_21`.`institutions`.`name` AS `name`,`germinate_gatekeeper_template_4_25_04_21`.`institutions`.`acronym` AS `acronym`,`germinate_gatekeeper_template_4_25_04_21`.`institutions`.`address` AS `address` from (`germinate_gatekeeper_template_4_25_04_21`.`users` left join `germinate_gatekeeper_template_4_25_04_21`.`institutions` on((`germinate_gatekeeper_template_4_25_04_21`.`institutions`.`id` = `germinate_gatekeeper_template_4_25_04_21`.`users`.`institution_id`)))"));
    }

    /**
     * Create an aliased <code>gatekeeper_db.view_user_details</code> table
     * reference
     */
    public ViewUserDetails(String alias) {
        this(DSL.name(alias), VIEW_USER_DETAILS);
    }

    /**
     * Create an aliased <code>gatekeeper_db.view_user_details</code> table
     * reference
     */
    public ViewUserDetails(Name alias) {
        this(alias, VIEW_USER_DETAILS);
    }

    /**
     * Create a <code>gatekeeper_db.view_user_details</code> table reference
     */
    public ViewUserDetails() {
        this(DSL.name("view_user_details"), null);
    }

    public <O extends Record> ViewUserDetails(Table<O> child, ForeignKey<O, ViewUserDetailsRecord> key) {
        super(child, key, VIEW_USER_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GatekeeperDb.GATEKEEPER_DB;
    }

    @Override
    public ViewUserDetails as(String alias) {
        return new ViewUserDetails(DSL.name(alias), this);
    }

    @Override
    public ViewUserDetails as(Name alias) {
        return new ViewUserDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewUserDetails rename(String name) {
        return new ViewUserDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewUserDetails rename(Name name) {
        return new ViewUserDetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, Timestamp, Timestamp, Byte, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
