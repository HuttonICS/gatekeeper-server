/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.util.*;

import javax.annotation.Generated;

import jhi.gatekeeper.server.database.*;
import jhi.gatekeeper.server.database.tables.records.DatabaseSystemsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DatabaseSystems extends TableImpl<DatabaseSystemsRecord>
{

    /**
     * The reference instance of <code>germinate_gatekeeper.database_systems</code>
     */
    public static final  DatabaseSystems                            DATABASE_SYSTEMS = new DatabaseSystems();
    private static final long                                       serialVersionUID = 149993397;
    /**
     * The column <code>germinate_gatekeeper.database_systems.id</code>.
     */
    public final         TableField<DatabaseSystemsRecord, Integer> ID               = createField("id", SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>germinate_gatekeeper.database_systems.system_name</code>.
     */
    public final         TableField<DatabaseSystemsRecord, String>  SYSTEM_NAME      = createField("system_name", SQLDataType.VARCHAR(64).nullable(false), this, "");
    /**
     * The column <code>germinate_gatekeeper.database_systems.server_name</code>.
     */
    public final         TableField<DatabaseSystemsRecord, String>  SERVER_NAME      = createField("server_name", SQLDataType.VARCHAR(64).nullable(false), this, "");
    /**
     * The column <code>germinate_gatekeeper.database_systems.description</code>.
     */
    public final         TableField<DatabaseSystemsRecord, String>  DESCRIPTION      = createField("description", SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>germinate_gatekeeper.database_systems</code> table reference
     */
    public DatabaseSystems()
    {
        this(DSL.name("database_systems"), null);
    }

    /**
     * Create an aliased <code>germinate_gatekeeper.database_systems</code> table reference
     */
    public DatabaseSystems(String alias)
    {
        this(DSL.name(alias), DATABASE_SYSTEMS);
    }

    /**
     * Create an aliased <code>germinate_gatekeeper.database_systems</code> table reference
     */
    public DatabaseSystems(Name alias)
    {
        this(alias, DATABASE_SYSTEMS);
    }

    private DatabaseSystems(Name alias, Table<DatabaseSystemsRecord> aliased)
    {
        this(alias, aliased, null);
    }

    private DatabaseSystems(Name alias, Table<DatabaseSystemsRecord> aliased, Field<?>[] parameters)
    {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DatabaseSystems(Table<O> child, ForeignKey<O, DatabaseSystemsRecord> key)
    {
        super(child, key, DATABASE_SYSTEMS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatabaseSystemsRecord> getRecordType()
    {
        return DatabaseSystemsRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema()
    {
        return GerminateGatekeeper.GERMINATE_GATEKEEPER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes()
    {
        return Arrays.<Index>asList(Indexes.DATABASE_SYSTEMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DatabaseSystemsRecord, Integer> getIdentity()
    {
        return Keys.IDENTITY_DATABASE_SYSTEMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DatabaseSystemsRecord> getPrimaryKey()
    {
        return Keys.KEY_DATABASE_SYSTEMS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DatabaseSystemsRecord>> getKeys()
    {
        return Arrays.<UniqueKey<DatabaseSystemsRecord>>asList(Keys.KEY_DATABASE_SYSTEMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseSystems as(String alias)
    {
        return new DatabaseSystems(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseSystems as(Name alias)
    {
        return new DatabaseSystems(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatabaseSystems rename(String name)
    {
        return new DatabaseSystems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatabaseSystems rename(Name name)
    {
        return new DatabaseSystems(name, null);
    }
}
