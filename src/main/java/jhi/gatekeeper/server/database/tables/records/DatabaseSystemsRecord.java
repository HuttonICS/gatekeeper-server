/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables.records;


import javax.annotation.Generated;

import jhi.gatekeeper.server.database.tables.DatabaseSystems;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatabaseSystemsRecord extends UpdatableRecordImpl<DatabaseSystemsRecord> implements Record4<Integer, String, String, String> {

    private static final long serialVersionUID = 1673667211;

    /**
     * Setter for <code>gatekeeper_db.database_systems.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gatekeeper_db.database_systems.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gatekeeper_db.database_systems.system_name</code>.
     */
    public void setSystemName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>gatekeeper_db.database_systems.system_name</code>.
     */
    public String getSystemName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>gatekeeper_db.database_systems.server_name</code>.
     */
    public void setServerName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>gatekeeper_db.database_systems.server_name</code>.
     */
    public String getServerName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>gatekeeper_db.database_systems.description</code>.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>gatekeeper_db.database_systems.description</code>.
     */
    public String getDescription() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return DatabaseSystems.DATABASE_SYSTEMS.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return DatabaseSystems.DATABASE_SYSTEMS.SYSTEM_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return DatabaseSystems.DATABASE_SYSTEMS.SERVER_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return DatabaseSystems.DATABASE_SYSTEMS.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getSystemName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getServerName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getSystemName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getServerName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseSystemsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseSystemsRecord value2(String value) {
        setSystemName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseSystemsRecord value3(String value) {
        setServerName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseSystemsRecord value4(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseSystemsRecord values(Integer value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DatabaseSystemsRecord
     */
    public DatabaseSystemsRecord() {
        super(DatabaseSystems.DATABASE_SYSTEMS);
    }

    /**
     * Create a detached, initialised DatabaseSystemsRecord
     */
    public DatabaseSystemsRecord(Integer id, String systemName, String serverName, String description) {
        super(DatabaseSystems.DATABASE_SYSTEMS);

        set(0, id);
        set(1, systemName);
        set(2, serverName);
        set(3, description);
    }
}
