/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import jhi.gatekeeper.server.database.GatekeeperDb;
import jhi.gatekeeper.server.database.Keys;
import jhi.gatekeeper.server.database.tables.records.UnapprovedUsersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UnapprovedUsers extends TableImpl<UnapprovedUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gatekeeper_db.unapproved_users</code>
     */
    public static final UnapprovedUsers UNAPPROVED_USERS = new UnapprovedUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UnapprovedUsersRecord> getRecordType() {
        return UnapprovedUsersRecord.class;
    }

    /**
     * The column <code>gatekeeper_db.unapproved_users.id</code>.
     */
    public final TableField<UnapprovedUsersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gatekeeper_db.unapproved_users.user_username</code>.
     */
    public final TableField<UnapprovedUsersRecord, String> USER_USERNAME = createField(DSL.name("user_username"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.unapproved_users.user_password</code>.
     */
    public final TableField<UnapprovedUsersRecord, String> USER_PASSWORD = createField(DSL.name("user_password"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.unapproved_users.user_full_name</code>.
     */
    public final TableField<UnapprovedUsersRecord, String> USER_FULL_NAME = createField(DSL.name("user_full_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column
     * <code>gatekeeper_db.unapproved_users.user_email_address</code>.
     */
    public final TableField<UnapprovedUsersRecord, String> USER_EMAIL_ADDRESS = createField(DSL.name("user_email_address"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.unapproved_users.institution_id</code>.
     */
    public final TableField<UnapprovedUsersRecord, Integer> INSTITUTION_ID = createField(DSL.name("institution_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>gatekeeper_db.unapproved_users.institution_name</code>.
     */
    public final TableField<UnapprovedUsersRecord, String> INSTITUTION_NAME = createField(DSL.name("institution_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>gatekeeper_db.unapproved_users.institution_acronym</code>.
     */
    public final TableField<UnapprovedUsersRecord, String> INSTITUTION_ACRONYM = createField(DSL.name("institution_acronym"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column
     * <code>gatekeeper_db.unapproved_users.institution_address</code>.
     */
    public final TableField<UnapprovedUsersRecord, String> INSTITUTION_ADDRESS = createField(DSL.name("institution_address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>gatekeeper_db.unapproved_users.database_system_id</code>.
     */
    public final TableField<UnapprovedUsersRecord, Integer> DATABASE_SYSTEM_ID = createField(DSL.name("database_system_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.unapproved_users.created_on</code>.
     */
    public final TableField<UnapprovedUsersRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column <code>gatekeeper_db.unapproved_users.has_been_rejected</code>.
     */
    public final TableField<UnapprovedUsersRecord, Byte> HAS_BEEN_REJECTED = createField(DSL.name("has_been_rejected"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gatekeeper_db.unapproved_users.needs_approval</code>.
     */
    public final TableField<UnapprovedUsersRecord, Byte> NEEDS_APPROVAL = createField(DSL.name("needs_approval"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gatekeeper_db.unapproved_users.activation_key</code>.
     */
    public final TableField<UnapprovedUsersRecord, String> ACTIVATION_KEY = createField(DSL.name("activation_key"), SQLDataType.VARCHAR(36), this, "");

    private UnapprovedUsers(Name alias, Table<UnapprovedUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private UnapprovedUsers(Name alias, Table<UnapprovedUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gatekeeper_db.unapproved_users</code> table
     * reference
     */
    public UnapprovedUsers(String alias) {
        this(DSL.name(alias), UNAPPROVED_USERS);
    }

    /**
     * Create an aliased <code>gatekeeper_db.unapproved_users</code> table
     * reference
     */
    public UnapprovedUsers(Name alias) {
        this(alias, UNAPPROVED_USERS);
    }

    /**
     * Create a <code>gatekeeper_db.unapproved_users</code> table reference
     */
    public UnapprovedUsers() {
        this(DSL.name("unapproved_users"), null);
    }

    public <O extends Record> UnapprovedUsers(Table<O> child, ForeignKey<O, UnapprovedUsersRecord> key) {
        super(child, key, UNAPPROVED_USERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GatekeeperDb.GATEKEEPER_DB;
    }

    @Override
    public Identity<UnapprovedUsersRecord, Integer> getIdentity() {
        return (Identity<UnapprovedUsersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UnapprovedUsersRecord> getPrimaryKey() {
        return Keys.KEY_UNAPPROVED_USERS_PRIMARY;
    }

    @Override
    public List<ForeignKey<UnapprovedUsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.UNAPPROVED_USERS_IBFK_1, Keys.UNAPPROVED_USERS_IBFK_2);
    }

    private transient Institutions _institutions;
    private transient DatabaseSystems _databaseSystems;

    /**
     * Get the implicit join path to the
     * <code>germinate_gatekeeper_template_4_21_08_31.institutions</code> table.
     */
    public Institutions institutions() {
        if (_institutions == null)
            _institutions = new Institutions(this, Keys.UNAPPROVED_USERS_IBFK_1);

        return _institutions;
    }

    /**
     * Get the implicit join path to the
     * <code>germinate_gatekeeper_template_4_21_08_31.database_systems</code>
     * table.
     */
    public DatabaseSystems databaseSystems() {
        if (_databaseSystems == null)
            _databaseSystems = new DatabaseSystems(this, Keys.UNAPPROVED_USERS_IBFK_2);

        return _databaseSystems;
    }

    @Override
    public UnapprovedUsers as(String alias) {
        return new UnapprovedUsers(DSL.name(alias), this);
    }

    @Override
    public UnapprovedUsers as(Name alias) {
        return new UnapprovedUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UnapprovedUsers rename(String name) {
        return new UnapprovedUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnapprovedUsers rename(Name name) {
        return new UnapprovedUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, String, String, Integer, String, String, String, Integer, Timestamp, Byte, Byte, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
