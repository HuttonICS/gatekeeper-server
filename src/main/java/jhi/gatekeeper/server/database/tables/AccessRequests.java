/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import jhi.gatekeeper.server.database.GatekeeperDb;
import jhi.gatekeeper.server.database.Indexes;
import jhi.gatekeeper.server.database.Keys;
import jhi.gatekeeper.server.database.tables.records.AccessRequestsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessRequests extends TableImpl<AccessRequestsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gatekeeper_db.access_requests</code>
     */
    public static final AccessRequests ACCESS_REQUESTS = new AccessRequests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccessRequestsRecord> getRecordType() {
        return AccessRequestsRecord.class;
    }

    /**
     * The column <code>gatekeeper_db.access_requests.id</code>.
     */
    public final TableField<AccessRequestsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gatekeeper_db.access_requests.user_id</code>.
     */
    public final TableField<AccessRequestsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.access_requests.database_system_id</code>.
     */
    public final TableField<AccessRequestsRecord, Integer> DATABASE_SYSTEM_ID = createField(DSL.name("database_system_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.access_requests.has_been_rejected</code>.
     */
    public final TableField<AccessRequestsRecord, Byte> HAS_BEEN_REJECTED = createField(DSL.name("has_been_rejected"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gatekeeper_db.access_requests.needs_approval</code>.
     */
    public final TableField<AccessRequestsRecord, Byte> NEEDS_APPROVAL = createField(DSL.name("needs_approval"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gatekeeper_db.access_requests.activation_key</code>.
     */
    public final TableField<AccessRequestsRecord, String> ACTIVATION_KEY = createField(DSL.name("activation_key"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>gatekeeper_db.access_requests.created_on</code>.
     */
    public final TableField<AccessRequestsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0), this, "");

    private AccessRequests(Name alias, Table<AccessRequestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccessRequests(Name alias, Table<AccessRequestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gatekeeper_db.access_requests</code> table
     * reference
     */
    public AccessRequests(String alias) {
        this(DSL.name(alias), ACCESS_REQUESTS);
    }

    /**
     * Create an aliased <code>gatekeeper_db.access_requests</code> table
     * reference
     */
    public AccessRequests(Name alias) {
        this(alias, ACCESS_REQUESTS);
    }

    /**
     * Create a <code>gatekeeper_db.access_requests</code> table reference
     */
    public AccessRequests() {
        this(DSL.name("access_requests"), null);
    }

    public <O extends Record> AccessRequests(Table<O> child, ForeignKey<O, AccessRequestsRecord> key) {
        super(child, key, ACCESS_REQUESTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GatekeeperDb.GATEKEEPER_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACCESS_REQUESTS_ACCESS_REQUESTS_IBFK1, Indexes.ACCESS_REQUESTS_ACCESS_REQUESTS_IBFK2);
    }

    @Override
    public Identity<AccessRequestsRecord, Integer> getIdentity() {
        return (Identity<AccessRequestsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccessRequestsRecord> getPrimaryKey() {
        return Keys.KEY_ACCESS_REQUESTS_PRIMARY;
    }

    @Override
    public List<ForeignKey<AccessRequestsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCESS_REQUESTS_IBFK_1, Keys.ACCESS_REQUESTS_IBFK_2);
    }

    private transient Users _users;
    private transient DatabaseSystems _databaseSystems;

    /**
     * Get the implicit join path to the
     * <code>germinate_gatekeeper_template_4_25_04_21.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.ACCESS_REQUESTS_IBFK_1);

        return _users;
    }

    /**
     * Get the implicit join path to the
     * <code>germinate_gatekeeper_template_4_25_04_21.database_systems</code>
     * table.
     */
    public DatabaseSystems databaseSystems() {
        if (_databaseSystems == null)
            _databaseSystems = new DatabaseSystems(this, Keys.ACCESS_REQUESTS_IBFK_2);

        return _databaseSystems;
    }

    @Override
    public AccessRequests as(String alias) {
        return new AccessRequests(DSL.name(alias), this);
    }

    @Override
    public AccessRequests as(Name alias) {
        return new AccessRequests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessRequests rename(String name) {
        return new AccessRequests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessRequests rename(Name name) {
        return new AccessRequests(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, Byte, Byte, String, Timestamp> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
