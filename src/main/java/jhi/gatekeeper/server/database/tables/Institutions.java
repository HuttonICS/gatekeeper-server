/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database.tables;


import jhi.gatekeeper.server.database.GatekeeperDb;
import jhi.gatekeeper.server.database.Keys;
import jhi.gatekeeper.server.database.tables.records.InstitutionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Institutions extends TableImpl<InstitutionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gatekeeper_db.institutions</code>
     */
    public static final Institutions INSTITUTIONS = new Institutions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstitutionsRecord> getRecordType() {
        return InstitutionsRecord.class;
    }

    /**
     * The column <code>gatekeeper_db.institutions.id</code>.
     */
    public final TableField<InstitutionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gatekeeper_db.institutions.name</code>.
     */
    public final TableField<InstitutionsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.institutions.acronym</code>.
     */
    public final TableField<InstitutionsRecord, String> ACRONYM = createField(DSL.name("acronym"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gatekeeper_db.institutions.address</code>.
     */
    public final TableField<InstitutionsRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    private Institutions(Name alias, Table<InstitutionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Institutions(Name alias, Table<InstitutionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gatekeeper_db.institutions</code> table reference
     */
    public Institutions(String alias) {
        this(DSL.name(alias), INSTITUTIONS);
    }

    /**
     * Create an aliased <code>gatekeeper_db.institutions</code> table reference
     */
    public Institutions(Name alias) {
        this(alias, INSTITUTIONS);
    }

    /**
     * Create a <code>gatekeeper_db.institutions</code> table reference
     */
    public Institutions() {
        this(DSL.name("institutions"), null);
    }

    public <O extends Record> Institutions(Table<O> child, ForeignKey<O, InstitutionsRecord> key) {
        super(child, key, INSTITUTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GatekeeperDb.GATEKEEPER_DB;
    }

    @Override
    public Identity<InstitutionsRecord, Integer> getIdentity() {
        return (Identity<InstitutionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<InstitutionsRecord> getPrimaryKey() {
        return Keys.KEY_INSTITUTIONS_PRIMARY;
    }

    @Override
    public Institutions as(String alias) {
        return new Institutions(DSL.name(alias), this);
    }

    @Override
    public Institutions as(Name alias) {
        return new Institutions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Institutions rename(String name) {
        return new Institutions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Institutions rename(Name name) {
        return new Institutions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
