/*
 * This file is generated by jOOQ.
 */
package jhi.gatekeeper.server.database;


import java.util.Arrays;
import java.util.List;

import jhi.gatekeeper.server.database.tables.AccessRequests;
import jhi.gatekeeper.server.database.tables.DatabaseSystems;
import jhi.gatekeeper.server.database.tables.Institutions;
import jhi.gatekeeper.server.database.tables.PasswordResetLog;
import jhi.gatekeeper.server.database.tables.SchemaVersion;
import jhi.gatekeeper.server.database.tables.UnapprovedUsers;
import jhi.gatekeeper.server.database.tables.UserHasAccessToDatabases;
import jhi.gatekeeper.server.database.tables.UserTypes;
import jhi.gatekeeper.server.database.tables.Users;
import jhi.gatekeeper.server.database.tables.ViewAccessRequestUserDetails;
import jhi.gatekeeper.server.database.tables.ViewCounts;
import jhi.gatekeeper.server.database.tables.ViewUnapprovedUserDetails;
import jhi.gatekeeper.server.database.tables.ViewUserDetails;
import jhi.gatekeeper.server.database.tables.ViewUserPermissions;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GatekeeperDb extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gatekeeper_db</code>
     */
    public static final GatekeeperDb GATEKEEPER_DB = new GatekeeperDb();

    /**
     * The table <code>gatekeeper_db.access_requests</code>.
     */
    public final AccessRequests ACCESS_REQUESTS = AccessRequests.ACCESS_REQUESTS;

    /**
     * The table <code>gatekeeper_db.database_systems</code>.
     */
    public final DatabaseSystems DATABASE_SYSTEMS = DatabaseSystems.DATABASE_SYSTEMS;

    /**
     * The table <code>gatekeeper_db.institutions</code>.
     */
    public final Institutions INSTITUTIONS = Institutions.INSTITUTIONS;

    /**
     * Log table of password reset requests.
     */
    public final PasswordResetLog PASSWORD_RESET_LOG = PasswordResetLog.PASSWORD_RESET_LOG;

    /**
     * The table <code>gatekeeper_db.schema_version</code>.
     */
    public final SchemaVersion SCHEMA_VERSION = SchemaVersion.SCHEMA_VERSION;

    /**
     * The table <code>gatekeeper_db.unapproved_users</code>.
     */
    public final UnapprovedUsers UNAPPROVED_USERS = UnapprovedUsers.UNAPPROVED_USERS;

    /**
     * The table <code>gatekeeper_db.user_has_access_to_databases</code>.
     */
    public final UserHasAccessToDatabases USER_HAS_ACCESS_TO_DATABASES = UserHasAccessToDatabases.USER_HAS_ACCESS_TO_DATABASES;

    /**
     * The table <code>gatekeeper_db.user_types</code>.
     */
    public final UserTypes USER_TYPES = UserTypes.USER_TYPES;

    /**
     * The table <code>gatekeeper_db.users</code>.
     */
    public final Users USERS = Users.USERS;

    /**
     * VIEW
     */
    public final ViewAccessRequestUserDetails VIEW_ACCESS_REQUEST_USER_DETAILS = ViewAccessRequestUserDetails.VIEW_ACCESS_REQUEST_USER_DETAILS;

    /**
     * VIEW
     */
    public final ViewCounts VIEW_COUNTS = ViewCounts.VIEW_COUNTS;

    /**
     * VIEW
     */
    public final ViewUnapprovedUserDetails VIEW_UNAPPROVED_USER_DETAILS = ViewUnapprovedUserDetails.VIEW_UNAPPROVED_USER_DETAILS;

    /**
     * VIEW
     */
    public final ViewUserDetails VIEW_USER_DETAILS = ViewUserDetails.VIEW_USER_DETAILS;

    /**
     * VIEW
     */
    public final ViewUserPermissions VIEW_USER_PERMISSIONS = ViewUserPermissions.VIEW_USER_PERMISSIONS;

    /**
     * No further instances allowed
     */
    private GatekeeperDb() {
        super("gatekeeper_db", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            AccessRequests.ACCESS_REQUESTS,
            DatabaseSystems.DATABASE_SYSTEMS,
            Institutions.INSTITUTIONS,
            PasswordResetLog.PASSWORD_RESET_LOG,
            SchemaVersion.SCHEMA_VERSION,
            UnapprovedUsers.UNAPPROVED_USERS,
            UserHasAccessToDatabases.USER_HAS_ACCESS_TO_DATABASES,
            UserTypes.USER_TYPES,
            Users.USERS,
            ViewAccessRequestUserDetails.VIEW_ACCESS_REQUEST_USER_DETAILS,
            ViewCounts.VIEW_COUNTS,
            ViewUnapprovedUserDetails.VIEW_UNAPPROVED_USER_DETAILS,
            ViewUserDetails.VIEW_USER_DETAILS,
            ViewUserPermissions.VIEW_USER_PERMISSIONS
        );
    }
}
