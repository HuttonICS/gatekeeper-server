import com.bmuschko.gradle.cargo.convention.Deployable
import com.bmuschko.gradle.cargo.tasks.remote.CargoRedeployRemote

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.7.0'
    }
}

plugins {
    id 'java'
    id 'war'
}

apply plugin: 'com.bmuschko.cargo-base'

compileJava.options.encoding = 'UTF-8'

group 'uk.ac.hutton.gatekeeper'
version '4.0.0'

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://repo.spring.io/plugins-release/'
    }
    maven {
        url 'http://maven.imagej.net/content/repositories/public/'
    }
}

dependencies {
    compile fileTree(dir: 'lib', include: ['*.jar'])

    implementation 'commons-io:commons-io:2.6'
    implementation 'org.apache.commons:commons-collections4:4.2'
    implementation 'org.apache.commons:commons-compress:1.18'
    implementation 'commons-logging:commons-logging:1.2'

    implementation 'org.restlet.jee:org.restlet:2.4.0'
    implementation 'org.restlet.jee:org.restlet.ext.servlet:2.4.0'
    implementation 'org.restlet.jee:org.restlet.ext.fileupload:2.4.0'
    implementation 'org.restlet.jee:org.restlet.ext.json:2.4.0'
    implementation 'org.restlet.jee:org.restlet.ext.gson:2.3.6'
    implementation 'org.json:json:20160212'

    implementation 'mysql:mysql-connector-java:8.0.16'
    implementation 'javax.activation:activation:1.1.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.jooq:jooq:3.11.10'
    implementation 'org.jooq:jooq-codegen:3.11.10'

    implementation 'org.flywaydb:flyway-core:4.0.2'
    implementation 'com.sun.mail:smtp:1.6.3'

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'

    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
}

// Generate a .jar file that other applications can use to communicate with the API
task jarClient (type: Jar, dependsOn: classes) {
    from sourceSets.main.output
    archiveFileName = 'gatekeeper-client.jar'
    includeEmptyDirs = false
    include '**/gatekeeper/resource/**'
    include '**/pojos/**'
    include '**/StatusMessage**'
    include '**/client/**'
}

// Runs the JOOQ code generation
task codegen (type: JavaExec) {
    group = 'Execution'
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.jooq.codegen.GenerationTool'
    args 'jooq.xml'
}

// Generate a .war file
war {
    dependsOn jar, jarClient

    rootSpec.exclude('**/jhi/**/*.class')
    rootSpec.includeEmptyDirs = false

    // Include external .jar files, but exclude the Gatekeeper client.
    classpath fileTree(dir:'build/libs/', include:'*.jar', excludes: ['gatekeeper-client.jar'])

    // Set the classpath
    manifest {
        attributes('Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '))
    }

    webInf {
        // Include the .properties file into the classes folder
        from(project.projectDir.toString()) {
            include 'config.properties'
            include 'logging.properties'
            into('classes')
        }
    }

    // Include the client code if it's available
    from("${project.projectDir.toString()}/client") {
        include '**/**.*'
        into('/')
    }
}

// Deploy the created .war file to Tomcat
task deployTomcat (type: CargoRedeployRemote) {
    dependsOn = [war]
    containerId = project.findProperty('tomcat.manager.version') ?: "tomcat8x"
    protocol = project.findProperty('tomcat.manager.protocol') ?: "http"
    hostname = project.findProperty('tomcat.manager.hostname') ?: "localhost"
    port = (project.findProperty('tomcat.manager.port') ?: "8080") as Integer
    username = project.findProperty('tomcat.manager.username') ?: ""
    password = project.findProperty('tomcat.manager.password') ?: ""
    deployables = [new Deployable(files: project.files([war.archiveFile]), context: "${project.'project.name'}/v${project.version}")]
}